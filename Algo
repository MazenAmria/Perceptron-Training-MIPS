In the main:

  Allocate X_ij as the matrix of inputs (each row = one tuple from the dataset)
  Allocate Yd_ik as the matrix of outputs (each row = desired output from the dataset)
  Allocate W_kj as the weights matrix that transforms the input to the output
  Allocate T_k as the thresholds of the neurons
  define LR as learning rate
  define B as momentum
  define ep as epochs

  read W_initial, T_initial, LR, B, ep from the user
  read j, k from the file
  from the file:
    tuple = read_line
    X_i = tuple[1:j]
    Y_i = one_hot_encoding(tuple[j+1])

  iterate with ep:
    call fit

In the fit:

  Allocate dW_kj as the matrix of the change in weights
  Allocate Y_k as the actual output
  Allocate E_k as the error in the output
  Allocate dC_kj as the real change in weights 
  Allocate dT_k as the change in thresholds

  iterate with i:
    debug_vector(X_i)
    transform(X_i)
    E = Yd_i
    E -= Y
    debug_vector(Y)
    debug_vector(Yd_i)
    debug_vector(E)

    dC = vector_cross(E, X)
    dC = scale_matrix(dC, LR)
    dW = scale_matrix(dW, B)
    dW += dC
    W += dW

    debug_matrix(dW)
    debug_matrix(W)

    dT = scale_vector(dT, B)
    E = scale_vector(E, LR)
    dT += E
    T += dT

    debug_vector(dT)
    debug_vector(T)

In the transform:

  Y_i = linear_transform(W, X_i)
  Y_i -= T
  debug_vector(Y_i)
  activation(Y_i)
